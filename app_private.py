import os
import io
import json
import time
import datetime as dt
from typing import List, Dict, Optional

import streamlit as st
import pandas as pd
import requests
import altair as alt

# -------------------------
# CONFIG / PATHS
# -------------------------
DATA_DIR = "data"
PRODUCTS_XLSX = os.path.join(DATA_DIR, "seznam_potravin_app.xlsx")
PLANS_DIR = os.path.join(DATA_DIR, "shopping_plans")
INBOX_DIR = os.path.join(DATA_DIR, "inbox")  # sem ulo≈æ√≠me uploadnut√© √∫ƒçtenky/audio

os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs(PLANS_DIR, exist_ok=True)
os.makedirs(INBOX_DIR, exist_ok=True)

st.set_page_config(page_title="IssueCoin ‚Äî Private", page_icon="üß†", layout="wide")

# -------------------------
# SIDEBAR ‚Äî SECRETS / INTEGRATIONS
# -------------------------
st.sidebar.title("‚öôÔ∏è Integrations")

# N8N webhook (voliteƒæn√©). Ak vypln√≠≈°, po≈°leme sem pl√°ny aj pr√≠lohy.
N8N_WEBHOOK = st.sidebar.text_input(
    "N8N Webhook URL (optional)",
    value=st.secrets.get("N8N_WEBHOOK_URL", ""),
    help="Ak vypln√≠≈°, n√°kupn√© pl√°ny/√∫ƒçtenky sa odo≈°l√∫ do n8n workflow."
)

# Calendarific (voliteƒæn√©)
CALENDARIFIC_KEY = st.secrets.get("CALENDARIFIC_API_KEY", "")
CALENDARIFIC_COUNTRY = st.sidebar.selectbox(
    "Calendarific country",
    options=["", "CZ", "SK"],
    index=0,
    help="Nechaj pr√°zdne, ak nechce≈° vola≈• Calendarific."
)

# -------------------------
# HELPERY: D√ÅTUMY / SVIATKY / ƒåNB
# -------------------------
@st.cache_data(ttl=600)
def get_cnb_rate(date: dt.date, currency: str) -> Optional[float]:
    """
    Vr√°ti kurz (CZK / currency) podƒæa d√°tumu z ƒåNB. Ak nie je dostupn√Ω presn√Ω d√°tum (v√≠kend/sviatok),
    sk√∫si posledn√Ω dostupn√Ω de≈à sp√§≈• max 7 dn√≠.
    CZK sa berie ako 1:1.
    """
    currency = currency.upper()
    if currency == "CZK":
        return 1.0

    # CNB textov√° tabuƒæka: https://www.cnb.cz/en/financial-markets/foreign-exchange-market/central-bank-exchange-rate-fixing/
    # Programmatic endpoint (historical day): https://www.cnb.cz/en/financial-markets/foreign-exchange-market/central-bank-exchange-rate-fixing/
    # Prakticky: https://www.cnb.cz/cs/financni-trhy/devizovy-trh/kurzy-devizoveho-trhu/denni_kurz.txt?date=DD.MM.YYYY
    for back in range(0, 7):
        d = date - dt.timedelta(days=back)
        url = f"https://www.cnb.cz/cs/financni-trhy/devizovy-trh/kurzy-devizoveho-trhu/denni_kurz.txt?date={d.strftime('%d.%m.%Y')}"
        try:
            resp = requests.get(url, timeout=10)
            if resp.ok and "zemƒõ|mƒõna|mno≈æstv√≠|k√≥d|kurz" in resp.text:
                lines = resp.text.splitlines()
                for line in lines:
                    parts = line.split("|")
                    if len(parts) == 5 and parts[3].upper() == currency:
                        mnozstvi = float(parts[2].strip().replace(",", "."))
                        kurz = float(parts[4].strip().replace(",", "."))
                        return kurz / mnozstvi  # kurz za 1 jednotku meny
        except Exception:
            pass
    return None

@st.cache_data(ttl=3600)
def get_holidays(year: int, country: str) -> pd.DataFrame:
    """
    Vr√°ti sviatky z Calendarific. Ak ch√Ωba API key alebo country, vr√°ti pr√°zdny DF.
    """
    if not CALENDARIFIC_KEY or not country:
        return pd.DataFrame(columns=["date", "name", "type"])

    url = "https://calendarific.com/api/v2/holidays"
    params = {"api_key": CALENDARIFIC_KEY, "country": country, "year": year}
    try:
        r = requests.get(url, params=params, timeout=15)
        r.raise_for_status()
        data = r.json()
        rows = []
        for h in data.get("response", {}).get("holidays", []):
            date = h["date"]["iso"][:10]
            name = h["name"]
            types = ",".join(h.get("type", []))
            rows.append({"date": date, "name": name, "type": types})
        return pd.DataFrame(rows)
    except Exception:
        return pd.DataFrame(columns=["date", "name", "type"])

def is_holiday(date: dt.date, country: str) -> Optional[str]:
    df = get_holidays(date.year, country)
    if df.empty:
        return None
    rec = df[df["date"] == date.strftime("%Y-%m-%d")]
    if rec.empty:
        return None
    return f"{rec.iloc[0]['name']} ({rec.iloc[0]['type']})"

# -------------------------
# LOAD PRODUCTS
# -------------------------
@st.cache_data
def load_products() -> pd.DataFrame:
    """
    Oƒçak√°va XLSX so stƒ∫pcami aspo≈à: 'kategoria', 'nazov' (alebo 'produkt').
    M√¥≈æe≈° ma≈• aj 'jednotka' (ks, kg, l) a 'preferovany_obchod' (Albert/Lidl/...)
    """
    if not os.path.exists(PRODUCTS_XLSX):
        # ak nem√°≈° s√∫bor, vytvor√≠me demo
        demo = pd.DataFrame({
            "kategoria": ["Mlieƒçne", "M√§so", "Trvanliv√©", "Peƒçivo", "Drogeria"],
            "nazov": ["Mlieko 1.5%", "Kuracie prsia", "Cestoviny vretienka", "Chlieb p≈°eniƒçn√Ω", "Prac√≠ pr√°≈°ok"],
            "jednotka": ["l", "kg", "kg", "ks", "ks"],
            "preferovany_obchod": ["Albert", "Tesco", "Lidl", "Albert", "DM"]
        })
        return demo
    df = pd.read_excel(PRODUCTS_XLSX)
    # normaliz√°cia n√°zvov stƒ∫pcov
    cols = {c.lower(): c for c in df.columns}
    # O≈°etrenie povinn√Ωch
    need = []
    if "kategoria" not in cols:
        need.append("kategoria")
    if "nazov" not in cols and "produkt" not in cols:
        need.append("nazov (alebo produkt)")
    if need:
        st.warning(f"V XLSX ch√Ωbaj√∫ stƒ∫pce: {', '.join(need)}. Vytvor√≠m doƒçasn√© demo d√°ta.")
        return load_products.__wrapped__()  # demo fallback

    # Premenuj 'produkt'->'nazov' ak treba
    if "nazov" not in df.columns and "produkt" in df.columns:
        df = df.rename(columns={"produkt": "nazov"})
    # Dopl≈à jednotku/obchod ak ch√Ωbaj√∫
    if "jednotka" not in df.columns:
        df["jednotka"] = ""
    if "preferovany_obchod" not in df.columns:
        df["preferovany_obchod"] = ""
    # Drop duplik√°ty, reset index
    df = df.dropna(subset=["nazov"]).copy()
    df["kategoria"] = df["kategoria"].fillna("Nezaraden√©")
    df["nazov"] = df["nazov"].astype(str)
    df = df.reset_index(drop=True)
    return df

products_df = load_products()

# -------------------------
# UI ‚Äî HEADER / BADGES
# -------------------------
colA, colB = st.columns([0.75, 0.25])
with colA:
    st.markdown("## üß† IssueCoin ‚Äî Private (OpenShift + N8N + Sheets-ready)")
    st.caption("Bilingv√°lne, GDPR-friendly, bez Microsoft/Power Automate. Z√°klad ost√°va z verejnej appky ‚Äî toto je nadstavba.")
with colB:
    st.metric("Polo≈æiek v katal√≥gu", len(products_df))

st.divider()

# -------------------------
# FILTER / CHECKLIST
# -------------------------
st.subheader("üõí N√°kupn√Ω checklist z tvojho XLSX")

with st.expander("üîé Filter"):
    c1, c2, c3 = st.columns(3)
    kategorie = ["(v≈°etky)"] + sorted(products_df["kategoria"].unique().tolist())
    kat = c1.selectbox("Kateg√≥ria", options=kategorie, index=0)
    hledej = c2.text_input("Hƒæada≈• n√°zov", "")
    obchod = c3.text_input("Preferovan√Ω obchod (filter)", "")

filtered = products_df.copy()
if kat != "(v≈°etky)":
    filtered = filtered[filtered["kategoria"] == kat]
if hledej.strip():
    filtered = filtered[filtered["nazov"].str.contains(hledej, case=False, na=False)]
if obchod.strip():
    filtered = filtered[filtered["preferovany_obchod"].str.contains(obchod, case=False, na=False)]

if filtered.empty:
    st.info("≈Ωiadne polo≈æky pre aktu√°lny filter.")
else:
    st.caption("Za≈°krtni, dopl≈à mno≈æstvo (ks/kg/l) a voliteƒæne cenu/obchod. Potom ulo≈æ alebo odo≈°li do n8n.")
    # Formul√°r s dynamick√Ωmi polo≈ækami
    with st.form("shopping_form", clear_on_submit=False):
        rows = []
        for i, row in filtered.reset_index(drop=True).iterrows():
            with st.container(border=True):
                c1, c2, c3, c4, c5 = st.columns([0.4, 0.15, 0.15, 0.15, 0.15])
                chk = c1.checkbox(f"{row['nazov']}", key=f"chk_{row['nazov']}")
                qty = c2.number_input("Mno≈æstvo", min_value=0.0, value=0.0, step=1.0, key=f"qty_{row['nazov']}")
                unit = c3.text_input("Jednotka", value=str(row.get("jednotka","")), key=f"unit_{row['nazov']}")
                price = c4.number_input("Cena (CZK)", min_value=0.0, value=0.0, step=1.0, key=f"price_{row['nazov']}")
                shop = c5.text_input("Obchod", value=str(row.get("preferovany_obchod","")), key=f"shop_{row['nazov']}")
                rows.append({"nazov": row["nazov"], "kategoria": row["kategoria"],
                             "vybrate": chk, "mnozstvo": qty, "jednotka": unit,
                             "cena": price, "obchod": shop})
        submitted = st.form_submit_button("üíæ Ulo≈æi≈• pl√°n (CSV)")

    plan_df = pd.DataFrame(rows)
    plan_df = plan_df[(plan_df["vybrate"]) & (plan_df["mnozstvo"] > 0)]

    if submitted:
        if plan_df.empty:
            st.warning("Neza≈°krtla si niƒç s mno≈æstvom > 0.")
        else:
            now = dt.datetime.now()
            fname = f"plan_{now.strftime('%Y-%m-%d_%H%M%S')}.csv"
            out_path = os.path.join(PLANS_DIR, fname)
            # dopln d√°tum, sviatok info, kurz CZK->CZK=1, pr√≠padne kalkul√°cie
            plan_df = plan_df.copy()
            plan_df["datum"] = now.date().isoformat()
            if CALENDARIFIC_COUNTRY:
                hol = is_holiday(now.date(), CALENDARIFIC_COUNTRY)
            else:
                hol = None
            plan_df["sviatok"] = hol if hol else ""

            plan_df.to_csv(out_path, index=False, encoding="utf-8")
            st.success(f"Pl√°n ulo≈æen√Ω: `{out_path}`")

            if N8N_WEBHOOK:
                try:
                    payload = plan_df.to_dict(orient="records")
                    r = requests.post(N8N_WEBHOOK, json={"type": "shopping_plan", "data": payload}, timeout=20)
                    if r.ok:
                        st.success("‚úÖ Odo≈°l√© do n8n.")
                    else:
                        st.warning(f"n8n odpoveƒè {r.status_code}: {r.text[:200]}")
                except Exception as e:
                    st.warning(f"n8n webhook zlyhal: {e}")

    if not plan_df.empty:
        st.markdown("#### N√°hƒæad ulo≈æen√©ho pl√°nu")
        st.dataframe(plan_df[["kategoria","nazov","mnozstvo","jednotka","cena","obchod"]], use_container_width=True)

        # r√Ωchly s√∫ƒçet podƒæa kateg√≥rie/obchodu
        if "cena" in plan_df.columns:
            plan_df["medzisucet"] = plan_df["cena"]
            chart = alt.Chart(plan_df).mark_bar().encode(
                x="kategoria:N",
                y="sum(medzisucet):Q",
                tooltip=["kategoria","sum(medzisucet)"]
            ).properties(height=280)
            st.altair_chart(chart, use_container_width=True)

st.divider()

# -------------------------
# UPLOAD ‚Äî √∫ƒçtenky / audio (STT/OCR hooks)
# -------------------------
st.subheader("üì§ Inbox: √∫ƒçtenky / hlasov√© pozn√°mky")

cU1, cU2 = st.columns(2)

with cU1:
    st.markdown("**√öƒçtenka (foto/PDF)** ‚Äî ulo≈æ√≠ sa do `data/inbox/` a (voliteƒæne) po≈°le do n8n.")
    receipt = st.file_uploader("Nahraj √∫ƒçtenku", type=["png","jpg","jpeg","pdf"], key="receipt_up")
    if receipt is not None:
        ts = int(time.time())
        ext = os.path.splitext(receipt.name)[1].lower()
        safe = f"receipt_{ts}{ext}"
        path = os.path.join(INBOX_DIR, safe)
        with open(path, "wb") as f:
            f.write(receipt.read())
        st.success(f"Ulo≈æen√©: `{path}`")

        if N8N_WEBHOOK:
            try:
                files = {"file": (safe, open(path,"rb"))}
                data = {"type": "receipt_upload", "ts": ts}
                r = requests.post(N8N_WEBHOOK, data=data, files=files, timeout=30)
                if r.ok:
                    st.success("‚úÖ √öƒçtenka odoslan√° do n8n (OCR/klasifik√°cia si sprav√≠≈° vo workflow).")
                else:
                    st.warning(f"n8n odpoveƒè {r.status_code}: {r.text[:200]}")
            except Exception as e:
                st.warning(f"n8n upload zlyhal: {e}")

with cU2:
    st.markdown("**Hlasov√° pozn√°mka (audio)** ‚Äî ulo≈æ√≠ sa do `data/inbox/` a (voliteƒæne) po≈°le do n8n.")
    audio = st.file_uploader("Nahraj audio", type=["wav","mp3","m4a"], key="audio_up")
    if audio is not None:
        ts = int(time.time())
        ext = os.path.splitext(audio.name)[1].lower()
        safe = f"voice_{ts}{ext}"
        path = os.path.join(INBOX_DIR, safe)
        with open(path, "wb") as f:
            f.write(audio.read())
        st.success(f"Ulo≈æen√©: `{path}`")

        if N8N_WEBHOOK:
            try:
                files = {"file": (safe, open(path,"rb"))}
                data = {"type": "voice_upload", "ts": ts}
                r = requests.post(N8N_WEBHOOK, data=data, files=files, timeout=30)
                if r.ok:
                    st.success("‚úÖ Audio odoslan√© do n8n (STT/transkripciu sprav√≠≈° vo workflow).")
                else:
                    st.warning(f"n8n odpoveƒè {r.status_code}: {r.text[:200]}")
            except Exception as e:
                st.warning(f"n8n upload zlyhal: {e}")

st.divider()

# -------------------------
# OPTIONAL: CNB PREPOƒåET DEMO
# -------------------------
with st.expander("üí± (Voliteƒæn√©) Prepoƒçet menou cez ƒåNB"):
    col1, col2, col3 = st.columns(3)
    dt_pick = col1.date_input("D√°tum kurzu", value=dt.date.today())
    cur = col2.text_input("Mena (napr. EUR, USD)", value="EUR")
    amount = col3.number_input("Suma v mene", min_value=0.0, value=100.0, step=10.0)

    if st.button("Prepoƒç√≠ta≈• do CZK"):
        rate = get_cnb_rate(dt_pick, cur)
        if rate:
            czk = amount * rate
            st.success(f"‚âà {czk:,.2f} CZK (kurz {cur}/{dt_pick.strftime('%d.%m.%Y')} ~ {rate:,.4f})")
        else:
            st.warning("Kurz sa nepodarilo z√≠ska≈•.")

# -------------------------
# FOOTER
# -------------------------
st.caption("¬© 2025 IssueCoin ‚Äî Private Edition (OpenShift + N8N hooks). by DenyP")

